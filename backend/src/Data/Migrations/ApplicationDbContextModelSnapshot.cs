// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e7f6a48-d7f8-4885-ab56-6b87d1762c3c"),
                            AssigneeId = new Guid("b7d59537-694c-4101-abb8-44a43d6859fc"),
                            CreatedAt = new DateTime(2025, 7, 31, 22, 11, 10, 440, DateTimeKind.Utc).AddTicks(3919),
                            CreatorId = new Guid("9cc7070f-362a-44fa-b9a6-a4f93c942538"),
                            Description = "NOTE: Do not use AI tools to write the code. The code will be screened thoroughly. Use DotNet for Backend and React for Frontend",
                            Priority = 2,
                            Status = 1,
                            Title = "React DotNet - Coding Assignment - Medlogix",
                            UpdatedAt = new DateTime(2025, 7, 31, 22, 11, 10, 440, DateTimeKind.Utc).AddTicks(3920)
                        });
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7d59537-694c-4101-abb8-44a43d6859fc"),
                            CreatedAt = new DateTime(2025, 7, 31, 22, 11, 10, 440, DateTimeKind.Utc).AddTicks(3812),
                            Email = "munetsilazzie@gmail.com",
                            Password = "87152AB405DB64027D236F03EE80D736",
                            Role = 1,
                            Username = "lazzie"
                        },
                        new
                        {
                            Id = new Guid("9cc7070f-362a-44fa-b9a6-a4f93c942538"),
                            CreatedAt = new DateTime(2025, 7, 31, 22, 11, 10, 440, DateTimeKind.Utc).AddTicks(3837),
                            Email = "alok.kumar@smoothstack.com",
                            Password = "16B989E3420BE5F0EC9F1276DC3CE772",
                            Role = 1,
                            Username = "alok"
                        });
                });

            modelBuilder.Entity("Data.Entities.Task", b =>
                {
                    b.HasOne("Data.Entities.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Creator");
                });
#pragma warning restore 612, 618
        }
    }
}
