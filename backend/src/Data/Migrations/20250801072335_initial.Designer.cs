// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250801072335_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Task", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssigneeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = "ae077477-53e3-4c94-967d-a31e086146e2",
                            AssigneeId = "8cc6b6cd-fdb0-4d4d-ad1b-92e0c043294a",
                            CreatedAt = new DateTime(2025, 8, 1, 7, 23, 33, 504, DateTimeKind.Utc).AddTicks(4668),
                            CreatorId = "2316cedf-bb9c-4c33-9840-e1090071c9ca",
                            Description = "NOTE: Do not use AI tools to write the code. The code will be screened thoroughly. Use DotNet for Backend and React for Frontend",
                            Priority = 2,
                            Status = 1,
                            Title = "React DotNet - Coding Assignment - Medlogix",
                            UpdatedAt = new DateTime(2025, 8, 1, 7, 23, 33, 504, DateTimeKind.Utc).AddTicks(4669)
                        });
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "8cc6b6cd-fdb0-4d4d-ad1b-92e0c043294a",
                            CreatedAt = new DateTime(2025, 8, 1, 7, 23, 33, 504, DateTimeKind.Utc).AddTicks(4490),
                            Email = "munetsilazzie@gmail.com",
                            Password = "87152AB405DB64027D236F03EE80D736",
                            Role = 1,
                            Username = "lazzie"
                        },
                        new
                        {
                            Id = "2316cedf-bb9c-4c33-9840-e1090071c9ca",
                            CreatedAt = new DateTime(2025, 8, 1, 7, 23, 33, 504, DateTimeKind.Utc).AddTicks(4523),
                            Email = "alok.kumar@smoothstack.com",
                            Password = "16B989E3420BE5F0EC9F1276DC3CE772",
                            Role = 1,
                            Username = "alok"
                        });
                });

            modelBuilder.Entity("Data.Entities.Task", b =>
                {
                    b.HasOne("Data.Entities.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Creator");
                });
#pragma warning restore 612, 618
        }
    }
}
